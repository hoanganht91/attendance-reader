#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script k·∫øt n·ªëi m√°y ch·∫•m c√¥ng s·ª≠ d·ª•ng pyzk
ƒê·ªçc v√† hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng
"""

import os
import sys
from datetime import datetime
from dotenv import load_dotenv
from zk import ZK, const

class AttendanceReader:
    def __init__(self, ip, port=4370, password=0):
        """
        Kh·ªüi t·∫°o k·∫øt n·ªëi m√°y ch·∫•m c√¥ng
        
        Args:
            ip (str): ƒê·ªãa ch·ªâ IP c·ªßa m√°y ch·∫•m c√¥ng
            port (int): Port k·∫øt n·ªëi (m·∫∑c ƒë·ªãnh 4370)
            password (int): M·∫≠t kh·∫©u thi·∫øt b·ªã (m·∫∑c ƒë·ªãnh 0)
        """
        self.ip = ip
        self.port = port
        self.password = password
        self.zk = ZK(ip, port=port, timeout=5, password=password, force_udp=False, ommit_ping=False)
        self.conn = None
        
    def connect(self):
        """K·∫øt n·ªëi t·ªõi m√°y ch·∫•m c√¥ng"""
        try:
            print(f"ƒêang k·∫øt n·ªëi t·ªõi m√°y ch·∫•m c√¥ng t·∫°i {self.ip}:{self.port}...")
            self.conn = self.zk.connect()
            print("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
            return False
    
    def disconnect(self):
        """Ng·∫Øt k·∫øt n·ªëi"""
        if self.conn:
            self.conn.disconnect()
            print("üîå ƒê√£ ng·∫Øt k·∫øt n·ªëi")
    
    def get_device_info(self):
        """L·∫•y th√¥ng tin thi·∫øt b·ªã"""
        if not self.conn:
            print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi")
            return None
            
        try:
            print("\nüìä TH√îNG TIN THI·∫æT B·ªä:")
            print("-" * 50)
            
            # Th√¥ng tin c∆° b·∫£n
            firmware_version = self.conn.get_firmware_version()
            print(f"Firmware version: {firmware_version}")
            
            # S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng v√† b·∫£n ghi
            users_count = len(self.conn.get_users())
            attendance_count = len(self.conn.get_attendance())
            
            print(f"S·ªë ng∆∞·ªùi d√πng: {users_count}")
            print(f"S·ªë b·∫£n ghi ch·∫•m c√¥ng: {attendance_count}")
            
            # Th·ªùi gian thi·∫øt b·ªã
            device_time = self.conn.get_time()
            print(f"Th·ªùi gian thi·∫øt b·ªã: {device_time}")
            
            return {
                'firmware': firmware_version,
                'users_count': users_count,
                'attendance_count': attendance_count,
                'device_time': device_time
            }
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin thi·∫øt b·ªã: {e}")
            return None
    
    def get_users(self):
        """L·∫•y danh s√°ch ng∆∞·ªùi d√πng"""
        if not self.conn:
            print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi")
            return []
            
        try:
            print("\nüë• DANH S√ÅCH NG∆Ø·ªúI D√ôNG:")
            print("-" * 80)
            print(f"{'ID':<8} {'T√™n':<20} {'Card':<15} {'Quy·ªÅn':<15} {'M·∫≠t kh·∫©u':<10}")
            print("-" * 80)
            
            users = self.conn.get_users()
            for user in users:
                privilege_name = self.get_privilege_name(user.privilege)
                card_id = user.card if user.card else "Kh√¥ng c√≥"
                password = "C√≥" if user.password else "Kh√¥ng"
                
                print(f"{user.uid:<8} {user.name:<20} {card_id:<15} {privilege_name:<15} {password:<10}")
                
            print(f"\nüìà T·ªïng s·ªë ng∆∞·ªùi d√πng: {len(users)}")
            return users
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng: {e}")
            return []
    
    def get_privilege_name(self, privilege):
        """Chuy·ªÉn ƒë·ªïi m√£ quy·ªÅn th√†nh t√™n"""
        privilege_map = {
            0: "Ng∆∞·ªùi d√πng",
            14: "Qu·∫£n tr·ªã vi√™n"
        }
        return privilege_map.get(privilege, f"Kh√¥ng x√°c ƒë·ªãnh ({privilege})")
    
    def get_attendance_logs(self, limit=10):
        """L·∫•y log ch·∫•m c√¥ng g·∫ßn nh·∫•t"""
        if not self.conn:
            print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi")
            return []
            
        try:
            print(f"\n‚è∞ {limit} B·∫¢N GHI CH·∫§M C√îNG G·∫¶N NH·∫§T:")
            print("-" * 80)
            print(f"{'User ID':<10} {'Th·ªùi gian':<20} {'Tr·∫°ng th√°i':<15} {'Verify':<10}")
            print("-" * 80)
            
            attendances = self.conn.get_attendance()
            # S·∫Øp x·∫øp theo th·ªùi gian gi·∫£m d·∫ßn v√† l·∫•y n b·∫£n ghi g·∫ßn nh·∫•t
            recent_attendances = sorted(attendances, key=lambda x: x.timestamp, reverse=True)[:limit]
            
            for att in recent_attendances:
                status = self.get_status_name(att.status)
                verify_name = self.get_verify_name(att.verify)
                time_str = att.timestamp.strftime("%Y-%m-%d %H:%M:%S")
                
                print(f"{att.user_id:<10} {time_str:<20} {status:<15} {verify_name:<10}")
                
            return recent_attendances
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y log ch·∫•m c√¥ng: {e}")
            return []
    
    def get_status_name(self, status):
        """Chuy·ªÉn ƒë·ªïi m√£ tr·∫°ng th√°i th√†nh t√™n"""
        status_map = {
            0: "V√†o",
            1: "Ra", 
            2: "Ngh·ªâ ra",
            3: "Ngh·ªâ v√†o",
            4: "TƒÉng ca v√†o",
            5: "TƒÉng ca ra"
        }
        return status_map.get(status, f"Kh√¥ng x√°c ƒë·ªãnh ({status})")
    
    def get_verify_name(self, verify):
        """Chuy·ªÉn ƒë·ªïi m√£ x√°c th·ª±c th√†nh t√™n"""
        verify_map = {
            1: "M·∫≠t kh·∫©u",
            3: "Th·∫ª",
            4: "V√¢n tay",
            11: "M·∫≠t kh·∫©u",
            12: "V√¢n tay",
            15: "Khu√¥n m·∫∑t",
            25: "L√≤ng b√†n tay"
        }
        return verify_map.get(verify, f"Kh√°c ({verify})")
    
    def search_user(self, search_term):
        """T√¨m ki·∫øm ng∆∞·ªùi d√πng theo ID ho·∫∑c t√™n"""
        if not self.conn:
            print("‚ùå Ch∆∞a c√≥ k·∫øt n·ªëi")
            return []
            
        try:
            users = self.conn.get_users()
            search_term = str(search_term).lower()
            
            matching_users = []
            for user in users:
                if (search_term in str(user.uid).lower() or 
                    search_term in user.name.lower()):
                    matching_users.append(user)
            
            if matching_users:
                print(f"\nüîç K·∫æT QU·∫¢ T√åM KI·∫æM CHO '{search_term}':")
                print("-" * 80)
                print(f"{'ID':<8} {'T√™n':<20} {'Card':<15} {'Quy·ªÅn':<15} {'M·∫≠t kh·∫©u':<10}")
                print("-" * 80)
                
                for user in matching_users:
                    privilege_name = self.get_privilege_name(user.privilege)
                    card_id = user.card if user.card else "Kh√¥ng c√≥"
                    password = "C√≥" if user.password else "Kh√¥ng"
                    
                    print(f"{user.uid:<8} {user.name:<20} {card_id:<15} {privilege_name:<15} {password:<10}")
            else:
                print(f"‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o v·ªõi t·ª´ kh√≥a '{search_term}'")
                
            return matching_users
            
        except Exception as e:
            print(f"‚ùå L·ªói khi t√¨m ki·∫øm: {e}")
            return []

def main():
    """H√†m ch√≠nh"""
    # Load c·∫•u h√¨nh t·ª´ file .env
    load_dotenv()
    
    # L·∫•y th√¥ng tin k·∫øt n·ªëi
    device_ip = os.getenv('DEVICE_IP', '192.168.1.100')
    device_port = int(os.getenv('DEVICE_PORT', 4370))
    device_password = int(os.getenv('DEVICE_PASSWORD', 0))
    
    print("üîÑ CH∆Ø∆†NG TR√åNH ƒê·ªåC TH√îNG TIN M√ÅY CH·∫§M C√îNG")
    print("=" * 60)
    print(f"IP: {device_ip}")
    print(f"Port: {device_port}")
    print("=" * 60)
    
    # T·∫°o ƒë·ªëi t∆∞·ª£ng reader
    reader = AttendanceReader(device_ip, device_port, device_password)
    
    try:
        # K·∫øt n·ªëi
        if not reader.connect():
            sys.exit(1)
        
        # L·∫•y th√¥ng tin thi·∫øt b·ªã
        reader.get_device_info()
        
        # L·∫•y danh s√°ch ng∆∞·ªùi d√πng
        users = reader.get_users()
        
        # L·∫•y log ch·∫•m c√¥ng g·∫ßn nh·∫•t
        reader.get_attendance_logs(10)
        
        # Menu t∆∞∆°ng t√°c
        while True:
            print(f"\n{'='*60}")
            print("MENU T∆Ø∆†NG T√ÅC:")
            print("1. Hi·ªÉn th·ªã l·∫°i danh s√°ch ng∆∞·ªùi d√πng")
            print("2. T√¨m ki·∫øm ng∆∞·ªùi d√πng")
            print("3. Hi·ªÉn th·ªã log ch·∫•m c√¥ng g·∫ßn nh·∫•t")
            print("4. Th√¥ng tin thi·∫øt b·ªã")
            print("0. Tho√°t")
            print("="*60)
            
            choice = input("Ch·ªçn ch·ª©c nƒÉng (0-4): ").strip()
            
            if choice == '1':
                reader.get_users()
            elif choice == '2':
                search_term = input("Nh·∫≠p ID ho·∫∑c t√™n ƒë·ªÉ t√¨m ki·∫øm: ").strip()
                if search_term:
                    reader.search_user(search_term)
                else:
                    print("‚ùå Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm")
            elif choice == '3':
                try:
                    limit = input("S·ªë b·∫£n ghi mu·ªën hi·ªÉn th·ªã (m·∫∑c ƒë·ªãnh 10): ").strip()
                    limit = int(limit) if limit else 10
                    reader.get_attendance_logs(limit)
                except ValueError:
                    print("‚ùå Vui l√≤ng nh·∫≠p s·ªë h·ª£p l·ªá")
            elif choice == '4':
                reader.get_device_info()
            elif choice == '0':
                print("üëã T·∫°m bi·ªát!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá")
        
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Ch∆∞∆°ng tr√¨nh b·ªã d·ª´ng b·ªüi ng∆∞·ªùi d√πng")
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
    finally:
        reader.disconnect()

if __name__ == "__main__":
    main() 